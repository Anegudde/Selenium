#!/usr/bin/perl
=cut;
********************************************************************************
#Description: Check for Description and Testcase Match from 
#Singularity table
#
#Author: Vikram
#
#Revision history
********************************************************************************
#rev.no	 Name	  Date 		Description
#0.1 	Vikram 	12 July 14	Intial draft
#0.2 	Vikram 	14 July 14	List Descriptor
#0.3    Vikram  18 July 14  List Objectives
********************************************************************************
=cut;
package Checklist;
#use strict;
#use warnings;
use File::Find qw(find);
use Test;
use IO::Handle;
use Benchmark qw/cmpthese timethese/;
use Data::Dumper;
#use List::MoreUtils qw'any';

#my $tb = Text::Table -> new ("Variable", "Minimum","Mid NegVe","Zero","Mid PosVe","Max","OutBoundLow","OutBoundHi");
my $dir_path="";
my $filename="";
my $line ;
my $file_name_arr;
#list of Placeholders for the 7 different Parameters listed in IRT
my $list_min ;
my $list_max ;
my $list_Zero ;
my $mid_Pos ;
my $mid_Neg ;
my $OutBou_lo ;
my $OutBou_hi ;
#list of Placeholders for the 4 different Parameters listed in ST
my $STCond;
my $NMinus;
my $NValue;
my $NPosit;
my @identlines = ();
my @identSingLine = ();
my @ListTestcases =();
my @value=();
my @var_list =();
my @objfiles =();
my @min_list=();
my @max_list=();
my @uniqMinTC=();
my @uniqMaxTC=();
my @STList=();
my @NNeg=();
my @Nval=();
my @NPlus=();
my @uniqNMinus=();
my @uniqNCond=();
my @uniqNPlus=();

my @Rule =('Min', 'Max', 'OB Low', 'OB High');        # for Now only 3 Conditions

#enter the directory path 
print ("enter the directory path where the files are present\n"); 
$dir_path = <STDIN>;
chomp($dir_path);
#opens the directory
opendir( TD, $dir_path ) || die("cannot open directory");
#perfom for all the files in the directory.
while($filename = readdir(TD))
{
    #List all Files but pick only TCF Files 
    @file_name_arr = split(/\./, $filename);
	if ( $file_name_arr[1] eq "tcf" )
    {       
        local $buffer ;
        undef @identlines;
        undef @ListTestcases;
        undef @value;
        undef @identSingLine;
        undef @objfiles;
        undef @var_list;
        undef @min_list;
        undef @max_list;
        undef @uniqMinTC;
        undef @uniqMaxTC;        
        undef @STList;
        undef @NNeg;
        undef @Nval;
        undef @NPlus; 
        undef @uniqNMinus;
        undef @uniqNCond;
        undef @uniqNPlus;
        my $file_IRT;
        my $flag_blankIRT =false;
        my $flag_blankST =false;
        
        open(OUTFILE,">",$dirname.$filename.out) or die $!;
        # Change the Filehandle to redirect Console Output.
        STDOUT->fdopen( \*OUTFILE, 'w' ) or die $!;          
        # Parse the IRT Table
        &ListIRT;         
        if ($flag_blankIRT) #check if the Section is Present
        {
            print("VariableName|Minimum|MidNegative|Zero|MidPositive|Maximum|OutBoundLow|OutBoundHigh"."\n");
            @identlines = split ("\n", $buffer);
            foreach my $val (@identlines)
            {
             $val =~ s/^\s+|\s+$//g ;   #remove spaces and Trim the values             
             @value = split (/\|/, $val);        
                # TODO find a method to ensure that End of File is used to Align the Tables
                if (@value[1] !~ m/NA/i)  { $list_var= @value[1];}  else{$list_var=0;}  #print $list_var."\t";                
                if (@value[4] !~ m/NA/i)  { $list_min= @value[4];}  else{$list_min=0;}  #print $list_min."\t";                
                if (@value[5] !~ m/NA/i)  { $mid_Neg=  @value[5];}  else{$mid_Neg=0; }  #print $mid_Neg."\t";
                if (@value[6] !~ m/NA/i)  { $list_Zero=@value[6];}  else{$list_Zero=0;} #print $list_Zero."\t";
                if (@value[7] !~ m/NA/i)  { $mid_Pos=  @value[7];}  else{$mid_Pos=0;}   #print $mid_Pos."\t";
                if (@value[8] !~ m/NA/i)  { $list_max= @value[8];}  else{$list_max=0;}  #print $list_max."\t";
                if (@value[9] !~ m/NA/i)  { $OutBou_lo=@value[9];}  else{$OutBou_lo=0;} #print $OutBou_lo."\t";
                if (@value[10] !~ m/NA/i) { $OutBou_hi=@value[10];} else{$OutBou_hi=0;} #print $OutBou_hi."\n";                                           
                # Update the List of Variables into a Buffer here.                
                if ($list_var)
                {
                    my $varname = $list_var; 
                    $varname =~ s/^\s+|\s+$//g;
                    push (@var_list, $list_var);                
                #Print the Table
                print $list_var."\t".$list_min."\t".$mid_Neg."\t".$list_Zero."\t".$mid_Pos."\t".$list_max."\t".$OutBou_lo."\t".$OutBou_hi."\n";
                push (@min_list, $list_min);  
                push (@max_list, $list_max); 
                #List the Unique Testcases for Minimal value and Maximum Values
                @uniqMinTC= uniq(@min_list); 
                    if (@uniqMinTC[0] ==0){shift;}  # cleanup Zero and Blanks
                @uniqMaxTC= uniq(@max_list); 
                    if (@uniqMaxTC[0] ==0){shift;}  # cleanup Zero and Blanks
                }
=cut;
                    #for Debug
                    my $debug;
                    foreach $debug(@uniqMinTC)
                    {
                        print $debug."|";
                    }
                    print "\n";
=cut;
                }     
            #TODO: Possible avenue to create Key Value Pair            
            # Get list of variable Names from IRT
            #TODO: Linked with Text::Table  for Pretty Print
            #$tb-> load($list_var,$list_min,$mid_neg,$list_Zero,$mis_Pos,$list_max,$OutBou_lo,$OutBou_hi);            
            #print $tb;     
        }  # end of the IRT Block
        # Generate the Singularity Table Here
        local $bufferSing ;  
        &ListST;            
        if ($flag_blankST)
        {
          @identSingLine = split ("\n", $bufferSing);
          undef @value;
          print "\n";
          print("\nSingularity Condition |N-1 Condition|N Condition|N+1 Condition"."\n");
            foreach my $val (@identSingLine)
            {
             $val =~ s/^\s+|\s+$//g ;   #remove spaces and Trim the values
             @value = split (/\|/, $val);    
                if (@value[1] !~ m/NA/i) { $STCond= @value[1];}  else{$STCond=0;} #print $NMinus."\t";                
                if (@value[2] !~ m/NA/i) { $NMinus= @value[2];}  else{$NMinus=0;} #print $NMinus."\t";                
                if (@value[3] !~ m/NA/i) { $NValue= @value[3];}  else{$NValue=0;} #print $NValue."\t";                
                if (@value[4] !~ m/NA/i) { $NPosit= @value[4];}  else{$NPosit=0;} #print $NPosit."\t";
                # Update the List of Variables into a Buffer here.    
                    #Print the Table                
                print $STCond."\t".$NMinus."\t".$NValue."\t".$NPosit."\n";                   
                # to Identify the List of Unique Conditions for Singularity Table
                push (@STList, $STCond);
                push (@NNeg,  $NMinus);
                push (@Nval,  $NValue);  
                push (@NPlus, $NPosit); 
                @STList= uniq(@STList);      #if (@STList[0] ==0)    {shift;}#pop(@STList);}     # cleanup Zero
                @uniqNMinus= uniq(@NNeg);  if (@uniqNMinus[0] ==0){shift;}#pop(@uniqNMinus);} # cleanup Zero
                @uniqNCond = uniq(@Nval);  if (@uniqNCond[0] ==0) {shift;}#pop(@uniqNCond);}  # cleanup Zero
                @uniqNPlus = uniq(@NPlus); if (@uniqNPlus[0] ==0) {shift;}#pop(@uniqNPlus);}  # cleanup Zero               
            }
=cut; 
                #for Debug
                my $debug;
                foreach $debug(@STList)
                {
                    print $debug."|";
                }
                print "\n";  

            # put any Commented Code here
=cut;                   
        }
        print "\n";
        &ListTestcases;
        print "\n";            
        #TODO: Need to remove Duplicate Entries of testcases if Both IRT and ST
        my @objbuffer =();
        &checkobjectives;                
        #TODO   Rule validator will start here for the Minimum Value parse from IRT
        #TODO:    Rule Validation for each of the Other 7 Values -Max, OB and Zero can start here
        # List all the Possible Rules here
        print "\n"."Listing the Objectives now"."\n";        
        my $a, $b, $c, $d=0;
=cut;   #check from All the Testcases     
            foreach $a (@ListTestcases)
            {
                $d++;
                foreach $b (@var_list)
                {
                    foreach $c (@Rule)
                    {  
                    &rulevalidator_IRT($a, $b ,$c ,$d);
                    }
                }
            }
=cut;   #check from All the Testcases     
            # check for Specific Testcases from IRT
            foreach $a (@var_list)
            {
                #$d++;
                foreach $b (@Rule)
                {
                    foreach $c (@uniqMinTC)
                    {
                        &rulevalidator_IRT($a, $b ,$c );
                    }
                    foreach $c (@uniqMaxTC)
                    {   
                        &rulevalidator_IRT($a, $b ,$c );
                    }
                }   
            }

        # check for Specific Singularities from ST.
        print "\n"."Checking for the Singularity Testcases now"."\n";    
        my $e=0,$f=0,$g;
            foreach $e(@STList)
            {
                foreach $f(@NNeg)
                {                   
                    &rulevalidator_ST('N-1',$e,$f);
                }
                foreach $f(@Nval)
                {                   
                    &rulevalidator_ST('N',$e,$f);
                }
                foreach $f(@NPlus)
                {                   
                    &rulevalidator_ST('N+1',$e,$f);
                }
            }                           
=cut;     
        #Any Commented Code goes here
=cut;    
    }   # End of the If Loop
close(OUTFILE);      # close the OUTFILE per file
}
closedir(TD);
sub ListIRT
{
    #opens the file inside the dir
    open(FP,"$dir_path/$filename")or die( "cannot open the file:$filename\n");
    print "\n".$dir_path.$filename."-----------------\n";
    #my $TCFFile = $filename;
    while (<FP>)	
    {
        if ( /INPUT RANGE/i) {
        #$buffer .=$_;  # removed as this is Duplicated
            while (<FP>) 
            {                        
            #TODO: Need to check if Blank Values are assigned to the Value    
            if ((m/None/i) ||( m/---/) || ( m/Variable/i))
                {
                 next;
                }
                else
                {
                $buffer .=$_;    
                last if /^\n$/;    
                }
            }
        }
        #check for Blank Entries returned
        if (($buffer == "" ) || ($buffer =~ m/none/i ))
        {
            $flag_blankIRT = false;
        }  
    }   
    #print $buffer; 
    #if 0       // Comment   
    if ( m/|/i )
    {                    
        if (@identlines ne "")
        {   foreach $line (@identlines)
           {
                print $line."\n";
           }    }
        
        if (@array ne "")
        {       foreach $val (@array)
        {
                print $val."\n";                
        }       }
    }
    else
    {
        print "\nNo Values Seen in the Singularity Table\n";
        goto END;
    }
END:
    #endif       // End of Comment
close(FP);
}        
sub ListTestcases
{
    #opens the file inside the dir
    open(FP,"$dir_path/$filename")or die( "cannot open the file:$filename\n");
    #print "\n".$dir_path.$filename."-----------------\n";
    #my $TCFFile = $filename;
    while (<FP>)	
    {
    if ( s/ Description = TEST//ig) 
        {
         my $str=$_; 
         $str =~ s/^\s+|\s+$//g ;
         push (@ListTestcases, $str);   
        }
    }
    #print the Testcases
    foreach my $j (@ListTestcases)    
    { 
        print " Valid Testcases are : ".$j."\n";
    }  
close(FP);
}        
sub ListST
{
 #opens the file inside the dir
    open(FP,"$dir_path/$filename")or die( "cannot open the file:$filename\n");
    #print "\n".$dir_path.$filename."-----------------\n";
    undef @identSingLine; 
    while (<FP>)	
    {
    if ( /SINGULARITY/i) 
        {            
        #$buffer .=$_;  # skip the Current string
            while (<FP>) 
            {                        
                #TODO: Need to check if Blank Values are assigned to the Value
                if ((m/None/i) ||( m/---/) || ( m/Expression/i)) # || (m/ /i))
                {
                 next;
                }
                else
                {
                $bufferSing .=$_;    
                last if /^\n$/;    
                }
            }
        }
        #check for Blank Entries returned
        if (($bufferSing == "" ) ||($bufferSing =~ m/none/i ))
        {
            $flag_blankST = false;
        }        
    }    
    #if 0       // Comment 
    if ( m/|/i )
    {           
        if (@identLine ne "")
        {   foreach $line (@identLine)
           {
                print $line."\n";
           }    }
        
        if (@array ne "")
        {       foreach $val (@array)
        {
                print $val."\n";                
        }       }
    }
    else    # this part of the Code is redundant
    {
        print "\nNo Values Seen in the Singularity Table\n";
        goto END;
    }
END:
    #endif       // End of Comment
close(FP);
}    
sub checkobjectives  # Subroutine to check the Objectives for the testcases
{
#opens the file inside the dir
open(FP,"$dir_path/$filename")or die( "cannot open the file:$filename\n");     
my $testcase ;
    while (<FP>)	
    {          
    if(m/Description = TEST/i)
        {
            $testcase=$_;
            push (@objfiles,$testcase);
            while(<FP>) 
            {             
             #$_ =~ s/[\x0A\x0D]//g; # to Strip lines of Extra Characters
             push (@objfiles,$_);
             #print $_;  #debug to list the Contents of the Objective Block
             if (m/Control Flow/i)
              { last;}
            }        
        }        
    }    
=cut     
#debug
    foreach my $b (@objfiles)
    {
       print $b;
    }     
=cut  #end of Debug 
    print "\n";
close(FP);
}
#TODO:  Rules for Maximum, Minimum, Out of Bounds 
sub rulevalidator_IRT
{    
    my $testcase = $_[0];
    my $rulepattern = $_[1];  
    my $var_name =$_[2];  
    #my $testcasenumber =$_[3];    
    my $val;
    print $testcase.":".$rulepattern.":".$var_name."\n";   #$testcasenumber. 
    $testcase =~ s/^\s+|\s+$//g ; #remove spaces and Trim the values
    #$localtestcase =~ m/Description = TEST/i;
    #@b= split("\n",@objfiles);    
    #if ($testcase != 0)
    { 
        #@b =split ("$\n", @objfiles);
        foreach $val (@objfiles)
        {
         if (($val =~ m/$rulepattern.+?$testcase/i))    
            {
             print "Present: ".$val;      
            }
        } 
=cut;        
        foreach my $val(@objfiles)
        {      
            if ($val =~ m/verify/i)
           {
            if (($val =~ m/$var_name/i) )#&& ($val =~ m/$var_name/i))
            {  
                #paydirt!
                print $_;
            }
           }
        }
=cut;
    }
    #Dumper @{$objfiles[$testcasenumber]};
}
#TODO: Rules for Maximum, Minimum, Out of Bounds and need to be done
sub rulevalidator_ST
{    
    my $Singularity = $_[0];      
    my $rulepattern =$_[1];
    my $testcase = $_[2];
    my $b;
    #if (($rulepattern != "") ||($testcase !="")) # Ignore Blank requests
    {
        $Singularity =~ s/^\s+|\s+$//g ; #remove spaces and Trim the values
        $rulepattern =~ s/^\s+|\s+$//g ;  #remove spaces and Trim the values        
        print $Singularity.":".$testcase.":".$rulepattern."\n";     
        foreach $b (@objfiles)
        {      
           if (($b =~ m/$Singularity/i ))
           {        
             #print "Matched ".$testcase."for ".$Singularity.": ".$rulepattern.":".$b;
           }            
        }
    }
    #Dumper @{$objfiles[$testcasenumber]};
}
sub uniq 
{
    my %seen;
    grep !$seen{$_}++, @_;
}
sub parsetable       # Subroutine to parse the Values in the Input range table
{
#TODO: To Debug the Subroutine later for Parsing IRT
my $count = $_[0];
if (@value[$count] !~ m/NA/i) 
{$ret= @value[$count];} 
else
{$ret==0;}
print $ret;
print @value[$count];
}
sub reopen($$$) 
{
  open $_[0], $_[1]. '&='. fileno($_[2]) or die "failed to reopen: $!";
}
#   End of File #
